import cv2
import numpy as np
import os
import math

#I THINK I FIGURED OUT THE ISSUE WITH THE ALIGNMENT PATTERN,
#I COMES DOWN TO IT STARTING AT THE BOTTOM OF THE QR CODE VS THE TOP SO TECHNICALLT THE PATTERN SHOULD START 6 FROM THE StopIteration
#BUT INSTEAD IT STARTS AT THE BOTTOM WHICH IS WHAT MAY BE CAUSING THE ISSUE

def correct_orientation(input_data, qr_size, module_size):
    new_coords = []
    for coords, state in input_data:
        x = coords[0]
        y = qr_size - coords[1]
        new_coords.append(((x, y), state))
    return new_coords

def write_image(image, file_dir):
    if file_dir is None:
        cv2.imwrite('qr_image.png', image)
    else:
        try:
            cv2.imwrite(file_dir, image)
        except:
            raise ValueError(f"{file_dir} Does Not Exist")

def create_qr_png(input_data, file_dir):
    qr_size = int(math.sqrt(len(input_data)))
    module_size = 1
    size_factor = 8
    placement = 10
    oriented_data = correct_orientation(input_data, qr_size, module_size)
    width = (qr_size * size_factor) + (placement * 2)
    height = width
    qr_image = np.zeros([width+(module_size*size_factor)+placement, height, 3],dtype=np.uint8)
    qr_image.fill(255)
    #cv2.rectangle(qr_image, (0, 0), (width+(module_size*size_factor)+placement, width+(module_size*size_factor)+placement), (199, 199, 191), -1)

    for coords, state in oriented_data:
        x, y = coords
        x1 = x * size_factor + placement
        y1 = y * size_factor + placement
        x2 = (x + 1) * size_factor + placement
        y2 = (y + 1) * size_factor + placement
        if state == 0:
            pass
        else:
            color = (0, 0, 0)
            cv2.rectangle(qr_image, (x1, y1), (x2, y2), color, -1)

    bigger = cv2.resize(qr_image, (250, 250))
    write_image(bigger, file_dir)


def display_qr_image(input_data):
    alignment_data = [
        [((4, 28), 1), ((5, 28), 1), ((6, 28), 1), ((7, 28), 1), ((8, 28), 1), ((4, 27), 1), ((5, 27), 0), ((6, 27), 0),
         ((7, 27), 0), ((8, 27), 1), ((4, 26), 1), ((5, 26), 0), ((6, 26), 1), ((7, 26), 0), ((8, 26), 1), ((4, 25), 1),
         ((5, 25), 0), ((6, 25), 0), ((7, 25), 0), ((8, 25), 1), ((4, 24), 1), ((5, 24), 1), ((6, 24), 1), ((7, 24), 1),
         ((8, 24), 1)],



        [((4, 52), 1), ((5, 52), 1), ((6, 52), 1), ((7, 52), 1), ((8, 52), 1), ((4, 51), 1), ((5, 51), 0), (
        (6, 51), 0), ((7, 51), 0), ((8, 51), 1), ((4, 50), 1), ((5, 50), 0), ((6, 50), 1), ((7, 50), 0), ((8, 50), 1), (
        (4, 49), 1), ((5, 49), 0), ((6, 49), 0), ((7, 49), 0), ((8, 49), 1), ((4, 48), 1), ((5, 48), 1), ((6, 48), 1), (
        (7, 48), 1), ((8, 48), 1)],
        [((4, 76), 1), ((5, 76), 1), ((6, 76), 1), ((7, 76), 1), ((8, 76), 1), ((4, 75), 1), ((5, 75), 0), (
        (6, 75), 0), ((7, 75), 0), ((8, 75), 1), ((4, 74), 1), ((5, 74), 0), ((6, 74), 1), ((7, 74), 0), ((8, 74), 1), (
        (4, 73), 1), ((5, 73), 0), ((6, 73), 0), ((7, 73), 0), ((8, 73), 1), ((4, 72), 1), ((5, 72), 1), ((6, 72), 1), (
        (7, 72), 1), ((8, 72), 1)],
        [((4, 100), 1), ((5, 100), 1), ((6, 100), 1), ((7, 100), 1), ((8, 100), 1), ((4, 99), 1), ((5, 99), 0), (
        (6, 99), 0), ((7, 99), 0), ((8, 99), 1), ((4, 98), 1), ((5, 98), 0), ((6, 98), 1), ((7, 98), 0), ((8, 98), 1), (
        (4, 97), 1), ((5, 97), 0), ((6, 97), 0), ((7, 97), 0), ((8, 97), 1), ((4, 96), 1), ((5, 96), 1), ((6, 96), 1), (
        (7, 96), 1), ((8, 96), 1)],
        [((24, 8), 1), ((25, 8), 1), ((26, 8), 1), ((27, 8), 1), ((28, 8), 1), ((24, 7), 1), ((25, 7), 0), (
        (26, 7), 0), ((27, 7), 0), ((28, 7), 1), ((24, 6), 1), ((25, 6), 0), ((26, 6), 1), ((27, 6), 0), ((28, 6), 1), (
        (24, 5), 1), ((25, 5), 0), ((26, 5), 0), ((27, 5), 0), ((28, 5), 1), ((24, 4), 1), ((25, 4), 1), ((26, 4), 1), (
        (27, 4), 1), ((28, 4), 1)],
        [((24, 28), 1), ((25, 28), 1), ((26, 28), 1), ((27, 28), 1), ((28, 28), 1), ((24, 27), 1), ((25, 27), 0), (
        (26, 27), 0), ((27, 27), 0), ((28, 27), 1), ((24, 26), 1), ((25, 26), 0), ((26, 26), 1), ((27, 26), 0), (
        (28, 26), 1), ((24, 25), 1), ((25, 25), 0), ((26, 25), 0), ((27, 25), 0), ((28, 25), 1), ((24, 24), 1), (
        (25, 24), 1), ((26, 24), 1), ((27, 24), 1), ((28, 24), 1)],
        [((24, 52), 1), ((25, 52), 1), ((26, 52), 1), ((27, 52), 1), ((28, 52), 1), ((24, 51), 1), ((25, 51), 0), (
        (26, 51), 0), ((27, 51), 0), ((28, 51), 1), ((24, 50), 1), ((25, 50), 0), ((26, 50), 1), ((27, 50), 0), (
        (28, 50), 1), ((24, 49), 1), ((25, 49), 0), ((26, 49), 0), ((27, 49), 0), ((28, 49), 1), ((24, 48), 1), (
        (25, 48), 1), ((26, 48), 1), ((27, 48), 1), ((28, 48), 1)],
        [((24, 76), 1), ((25, 76), 1), ((26, 76), 1), ((27, 76), 1), ((28, 76), 1), ((24, 75), 1), ((25, 75), 0), (
        (26, 75), 0), ((27, 75), 0), ((28, 75), 1), ((24, 74), 1), ((25, 74), 0), ((26, 74), 1), ((27, 74), 0), (
        (28, 74), 1), ((24, 73), 1), ((25, 73), 0), ((26, 73), 0), ((27, 73), 0), ((28, 73), 1), ((24, 72), 1), (
        (25, 72), 1), ((26, 72), 1), ((27, 72), 1), ((28, 72), 1)],
        [((24, 100), 1), ((25, 100), 1), ((26, 100), 1), ((27, 100), 1), ((28, 100), 1), ((24, 99), 1), ((25, 99), 0), (
        (26, 99), 0), ((27, 99), 0), ((28, 99), 1), ((24, 98), 1), ((25, 98), 0), ((26, 98), 1), ((27, 98), 0), (
        (28, 98), 1), ((24, 97), 1), ((25, 97), 0), ((26, 97), 0), ((27, 97), 0), ((28, 97), 1), ((24, 96), 1), (
        (25, 96), 1), ((26, 96), 1), ((27, 96), 1), ((28, 96), 1)],
        [((24, 124), 1), ((25, 124), 1), ((26, 124), 1), ((27, 124), 1), ((28, 124), 1), ((24, 123), 1), (
        (25, 123), 0), ((26, 123), 0), ((27, 123), 0), ((28, 123), 1), ((24, 122), 1), ((25, 122), 0), ((26, 122), 1), (
        (27, 122), 0), ((28, 122), 1), ((24, 121), 1), ((25, 121), 0), ((26, 121), 0), ((27, 121), 0), ((28, 121), 1), (
        (24, 120), 1), ((25, 120), 1), ((26, 120), 1), ((27, 120), 1), ((28, 120), 1)],
        [((48, 8), 1), ((49, 8), 1), ((50, 8), 1), ((51, 8), 1), ((52, 8), 1), ((48, 7), 1), ((49, 7), 0), (
        (50, 7), 0), ((51, 7), 0), ((52, 7), 1), ((48, 6), 1), ((49, 6), 0), ((50, 6), 1), ((51, 6), 0), ((52, 6), 1), (
        (48, 5), 1), ((49, 5), 0), ((50, 5), 0), ((51, 5), 0), ((52, 5), 1), ((48, 4), 1), ((49, 4), 1), ((50, 4), 1), (
        (51, 4), 1), ((52, 4), 1)],
        [((48, 28), 1), ((49, 28), 1), ((50, 28), 1), ((51, 28), 1), ((52, 28), 1), ((48, 27), 1), ((49, 27), 0), (
        (50, 27), 0), ((51, 27), 0), ((52, 27), 1), ((48, 26), 1), ((49, 26), 0), ((50, 26), 1), ((51, 26), 0), (
        (52, 26), 1), ((48, 25), 1), ((49, 25), 0), ((50, 25), 0), ((51, 25), 0), ((52, 25), 1), ((48, 24), 1), (
        (49, 24), 1), ((50, 24), 1), ((51, 24), 1), ((52, 24), 1)],
        [((48, 52), 1), ((49, 52), 1), ((50, 52), 1), ((51, 52), 1), ((52, 52), 1), ((48, 51), 1), ((49, 51), 0), (
        (50, 51), 0), ((51, 51), 0), ((52, 51), 1), ((48, 50), 1), ((49, 50), 0), ((50, 50), 1), ((51, 50), 0), (
        (52, 50), 1), ((48, 49), 1), ((49, 49), 0), ((50, 49), 0), ((51, 49), 0), ((52, 49), 1), ((48, 48), 1), (
        (49, 48), 1), ((50, 48), 1), ((51, 48), 1), ((52, 48), 1)],
        [((48, 76), 1), ((49, 76), 1), ((50, 76), 1), ((51, 76), 1), ((52, 76), 1), ((48, 75), 1), ((49, 75), 0), (
        (50, 75), 0), ((51, 75), 0), ((52, 75), 1), ((48, 74), 1), ((49, 74), 0), ((50, 74), 1), ((51, 74), 0), (
        (52, 74), 1), ((48, 73), 1), ((49, 73), 0), ((50, 73), 0), ((51, 73), 0), ((52, 73), 1), ((48, 72), 1), (
        (49, 72), 1), ((50, 72), 1), ((51, 72), 1), ((52, 72), 1)],
        [((48, 100), 1), ((49, 100), 1), ((50, 100), 1), ((51, 100), 1), ((52, 100), 1), ((48, 99), 1), ((49, 99), 0), (
        (50, 99), 0), ((51, 99), 0), ((52, 99), 1), ((48, 98), 1), ((49, 98), 0), ((50, 98), 1), ((51, 98), 0), (
        (52, 98), 1), ((48, 97), 1), ((49, 97), 0), ((50, 97), 0), ((51, 97), 0), ((52, 97), 1), ((48, 96), 1), (
        (49, 96), 1), ((50, 96), 1), ((51, 96), 1), ((52, 96), 1)],
        [((48, 124), 1), ((49, 124), 1), ((50, 124), 1), ((51, 124), 1), ((52, 124), 1), ((48, 123), 1), (
        (49, 123), 0), ((50, 123), 0), ((51, 123), 0), ((52, 123), 1), ((48, 122), 1), ((49, 122), 0), ((50, 122), 1), (
        (51, 122), 0), ((52, 122), 1), ((48, 121), 1), ((49, 121), 0), ((50, 121), 0), ((51, 121), 0), ((52, 121), 1), (
        (48, 120), 1), ((49, 120), 1), ((50, 120), 1), ((51, 120), 1), ((52, 120), 1)],
        [((72, 8), 1), ((73, 8), 1), ((74, 8), 1), ((75, 8), 1), ((76, 8), 1), ((72, 7), 1), ((73, 7), 0), (
        (74, 7), 0), ((75, 7), 0), ((76, 7), 1), ((72, 6), 1), ((73, 6), 0), ((74, 6), 1), ((75, 6), 0), ((76, 6), 1), (
        (72, 5), 1), ((73, 5), 0), ((74, 5), 0), ((75, 5), 0), ((76, 5), 1), ((72, 4), 1), ((73, 4), 1), ((74, 4), 1), (
        (75, 4), 1), ((76, 4), 1)],
        [((72, 28), 1), ((73, 28), 1), ((74, 28), 1), ((75, 28), 1), ((76, 28), 1), ((72, 27), 1), ((73, 27), 0), (
        (74, 27), 0), ((75, 27), 0), ((76, 27), 1), ((72, 26), 1), ((73, 26), 0), ((74, 26), 1), ((75, 26), 0), (
        (76, 26), 1), ((72, 25), 1), ((73, 25), 0), ((74, 25), 0), ((75, 25), 0), ((76, 25), 1), ((72, 24), 1), (
        (73, 24), 1), ((74, 24), 1), ((75, 24), 1), ((76, 24), 1)],
        [((72, 52), 1), ((73, 52), 1), ((74, 52), 1), ((75, 52), 1), ((76, 52), 1), ((72, 51), 1), ((73, 51), 0), (
        (74, 51), 0), ((75, 51), 0), ((76, 51), 1), ((72, 50), 1), ((73, 50), 0), ((74, 50), 1), ((75, 50), 0), (
        (76, 50), 1), ((72, 49), 1), ((73, 49), 0), ((74, 49), 0), ((75, 49), 0), ((76, 49), 1), ((72, 48), 1), (
        (73, 48), 1), ((74, 48), 1), ((75, 48), 1), ((76, 48), 1)],
        [((72, 76), 1), ((73, 76), 1), ((74, 76), 1), ((75, 76), 1), ((76, 76), 1), ((72, 75), 1), ((73, 75), 0), (
        (74, 75), 0), ((75, 75), 0), ((76, 75), 1), ((72, 74), 1), ((73, 74), 0), ((74, 74), 1), ((75, 74), 0), (
        (76, 74), 1), ((72, 73), 1), ((73, 73), 0), ((74, 73), 0), ((75, 73), 0), ((76, 73), 1), ((72, 72), 1), (
        (73, 72), 1), ((74, 72), 1), ((75, 72), 1), ((76, 72), 1)],
        [((72, 100), 1), ((73, 100), 1), ((74, 100), 1), ((75, 100), 1), ((76, 100), 1), ((72, 99), 1), ((73, 99), 0), (
        (74, 99), 0), ((75, 99), 0), ((76, 99), 1), ((72, 98), 1), ((73, 98), 0), ((74, 98), 1), ((75, 98), 0), (
        (76, 98), 1), ((72, 97), 1), ((73, 97), 0), ((74, 97), 0), ((75, 97), 0), ((76, 97), 1), ((72, 96), 1), (
        (73, 96), 1), ((74, 96), 1), ((75, 96), 1), ((76, 96), 1)],
        [((72, 124), 1), ((73, 124), 1), ((74, 124), 1), ((75, 124), 1), ((76, 124), 1), ((72, 123), 1), (
        (73, 123), 0), ((74, 123), 0), ((75, 123), 0), ((76, 123), 1), ((72, 122), 1), ((73, 122), 0), ((74, 122), 1), (
        (75, 122), 0), ((76, 122), 1), ((72, 121), 1), ((73, 121), 0), ((74, 121), 0), ((75, 121), 0), ((76, 121), 1), (
        (72, 120), 1), ((73, 120), 1), ((74, 120), 1), ((75, 120), 1), ((76, 120), 1)],
        [((96, 8), 1), ((97, 8), 1), ((98, 8), 1), ((99, 8), 1), ((100, 8), 1), ((96, 7), 1), ((97, 7), 0), (
        (98, 7), 0), ((99, 7), 0), ((100, 7), 1), ((96, 6), 1), ((97, 6), 0), ((98, 6), 1), ((99, 6), 0), (
        (100, 6), 1), ((96, 5), 1), ((97, 5), 0), ((98, 5), 0), ((99, 5), 0), ((100, 5), 1), ((96, 4), 1), (
        (97, 4), 1), ((98, 4), 1), ((99, 4), 1), ((100, 4), 1)],
        [((96, 28), 1), ((97, 28), 1), ((98, 28), 1), ((99, 28), 1), ((100, 28), 1), ((96, 27), 1), ((97, 27), 0), (
        (98, 27), 0), ((99, 27), 0), ((100, 27), 1), ((96, 26), 1), ((97, 26), 0), ((98, 26), 1), ((99, 26), 0), (
        (100, 26), 1), ((96, 25), 1), ((97, 25), 0), ((98, 25), 0), ((99, 25), 0), ((100, 25), 1), ((96, 24), 1), (
        (97, 24), 1), ((98, 24), 1), ((99, 24), 1), ((100, 24), 1)],
        [((96, 52), 1), ((97, 52), 1), ((98, 52), 1), ((99, 52), 1), ((100, 52), 1), ((96, 51), 1), ((97, 51), 0), (
        (98, 51), 0), ((99, 51), 0), ((100, 51), 1), ((96, 50), 1), ((97, 50), 0), ((98, 50), 1), ((99, 50), 0), (
        (100, 50), 1), ((96, 49), 1), ((97, 49), 0), ((98, 49), 0), ((99, 49), 0), ((100, 49), 1), ((96, 48), 1), (
        (97, 48), 1), ((98, 48), 1), ((99, 48), 1), ((100, 48), 1)],
        [((96, 76), 1), ((97, 76), 1), ((98, 76), 1), ((99, 76), 1), ((100, 76), 1), ((96, 75), 1), ((97, 75), 0), (
        (98, 75), 0), ((99, 75), 0), ((100, 75), 1), ((96, 74), 1), ((97, 74), 0), ((98, 74), 1), ((99, 74), 0), (
        (100, 74), 1), ((96, 73), 1), ((97, 73), 0), ((98, 73), 0), ((99, 73), 0), ((100, 73), 1), ((96, 72), 1), (
        (97, 72), 1), ((98, 72), 1), ((99, 72), 1), ((100, 72), 1)],
        [((96, 100), 1), ((97, 100), 1), ((98, 100), 1), ((99, 100), 1), ((100, 100), 1), ((96, 99), 1), (
        (97, 99), 0), ((98, 99), 0), ((99, 99), 0), ((100, 99), 1), ((96, 98), 1), ((97, 98), 0), ((98, 98), 1), (
        (99, 98), 0), ((100, 98), 1), ((96, 97), 1), ((97, 97), 0), ((98, 97), 0), ((99, 97), 0), ((100, 97), 1), (
        (96, 96), 1), ((97, 96), 1), ((98, 96), 1), ((99, 96), 1), ((100, 96), 1)],
        [((96, 124), 1), ((97, 124), 1), ((98, 124), 1), ((99, 124), 1), ((100, 124), 1), ((96, 123), 1), (
        (97, 123), 0), ((98, 123), 0), ((99, 123), 0), ((100, 123), 1), ((96, 122), 1), ((97, 122), 0), (
        (98, 122), 1), ((99, 122), 0), ((100, 122), 1), ((96, 121), 1), ((97, 121), 0), ((98, 121), 0), (
        (99, 121), 0), ((100, 121), 1), ((96, 120), 1), ((97, 120), 1), ((98, 120), 1), ((99, 120), 1), ((100, 120), 1)],
        [((120, 8), 1), ((121, 8), 1), ((122, 8), 1), ((123, 8), 1), ((124, 8), 1), ((120, 7), 1), ((121, 7), 0), (
        (122, 7), 0), ((123, 7), 0), ((124, 7), 1), ((120, 6), 1), ((121, 6), 0), ((122, 6), 1), ((123, 6), 0), (
        (124, 6), 1), ((120, 5), 1), ((121, 5), 0), ((122, 5), 0), ((123, 5), 0), ((124, 5), 1), ((120, 4), 1), (
        (121, 4), 1), ((122, 4), 1), ((123, 4), 1), ((124, 4), 1)],
        [((120, 28), 1), ((121, 28), 1), ((122, 28), 1), ((123, 28), 1), ((124, 28), 1), ((120, 27), 1), (
        (121, 27), 0), ((122, 27), 0), ((123, 27), 0), ((124, 27), 1), ((120, 26), 1), ((121, 26), 0), ((122, 26), 1), (
        (123, 26), 0), ((124, 26), 1), ((120, 25), 1), ((121, 25), 0), ((122, 25), 0), ((123, 25), 0), ((124, 25), 1), (
        (120, 24), 1), ((121, 24), 1), ((122, 24), 1), ((123, 24), 1), ((124, 24), 1)],
        [((120, 52), 1), ((121, 52), 1), ((122, 52), 1), ((123, 52), 1), ((124, 52), 1), ((120, 51), 1), (
        (121, 51), 0), ((122, 51), 0), ((123, 51), 0), ((124, 51), 1), ((120, 50), 1), ((121, 50), 0), ((122, 50), 1), (
        (123, 50), 0), ((124, 50), 1), ((120, 49), 1), ((121, 49), 0), ((122, 49), 0), ((123, 49), 0), ((124, 49), 1), (
        (120, 48), 1), ((121, 48), 1), ((122, 48), 1), ((123, 48), 1), ((124, 48), 1)],
        [((120, 76), 1), ((121, 76), 1), ((122, 76), 1), ((123, 76), 1), ((124, 76), 1), ((120, 75), 1), (
        (121, 75), 0), ((122, 75), 0), ((123, 75), 0), ((124, 75), 1), ((120, 74), 1), ((121, 74), 0), ((122, 74), 1), (
        (123, 74), 0), ((124, 74), 1), ((120, 73), 1), ((121, 73), 0), ((122, 73), 0), ((123, 73), 0), ((124, 73), 1), (
        (120, 72), 1), ((121, 72), 1), ((122, 72), 1), ((123, 72), 1), ((124, 72), 1)],
        [((120, 100), 1), ((121, 100), 1), ((122, 100), 1), ((123, 100), 1), ((124, 100), 1), ((120, 99), 1), (
        (121, 99), 0), ((122, 99), 0), ((123, 99), 0), ((124, 99), 1), ((120, 98), 1), ((121, 98), 0), ((122, 98), 1), (
        (123, 98), 0), ((124, 98), 1), ((120, 97), 1), ((121, 97), 0), ((122, 97), 0), ((123, 97), 0), ((124, 97), 1), (
        (120, 96), 1), ((121, 96), 1), ((122, 96), 1), ((123, 96), 1), ((124, 96), 1)],

    ]
    alignment_data = [] #alignment_data[0]
    module_size = 1
    size_factor = 8
    qr_size = int(math.sqrt(len(input_data)))
    placement = 50
    oriented_data = correct_orientation(input_data, qr_size, module_size)
    oriented_alignment = correct_orientation(alignment_data, qr_size, module_size)
    width = (qr_size * size_factor) + (placement * 2)
    height = width
    qr_image = np.zeros([width+(module_size*size_factor)+placement, height, 3],dtype=np.uint8)
    qr_image.fill(255)
    #cv2.rectangle(qr_image, (0, 0), (width+(module_size*size_factor)+placement, width+(module_size*size_factor)+placement), (199, 199, 191), -1)

    for coords, state in oriented_data:
        x, y = coords
        #print(coords)
        x1 = x * size_factor + placement
        y1 = y * size_factor + placement
        x2 = (x + 1) * size_factor + placement
        y2 = (y + 1) * size_factor + placement
        if state == 0:
            pass
        else:
            if coords in [i[0] for i in oriented_alignment]:
                color = (0, 255, 0)
            else:
                color = (0, 0, 0)
            cv2.rectangle(qr_image, (x1, y1), (x2, y2), color, -1)

    bigger = cv2.resize(qr_image, (600, 600))
    cv2.imshow('QR', bigger)
    cv2.waitKey(0)